#!/usr/bin/env python3
import subprocess
import sys
import os
import re


def get_project_root():
    return (
        subprocess.run(
            ["git", "rev-parse", "--show-toplevel"], capture_output=True, text=True
        ).stdout.strip()
        + "/app"
    )


def get_commit_message():
    result = subprocess.run(
        ["git", "log", "-1", "--pretty=%B"], capture_output=True, text=True
    )
    return result.stdout.strip()


def is_valid_commit_message(message):
    if "Merge branch" in message or "[skip ci]" in message or "Merge pull request":
        return True
    return bool(
        re.search(r"^(feat|fix|chore|ci|test)(\(.+\))?:\s", message, re.IGNORECASE)
    )


def start_processes(processes):
    is_fine = True
    for proc in processes:
        print(f"🔍 Running {proc['name']}...")
        result = subprocess.run(proc["command"], capture_output=True, text=True)

        if result.returncode == 0:
            print(f"✅ {proc['name']} check passed.")
        else:
            is_fine = False
            print(f"❌ {proc['name']} check failed.")
            print(result.stderr)
    print("\n")
    return is_fine


def main():
    print("Pre-commit hook is incoming...")
    project_root = get_project_root()
    os.chdir(project_root)

    run_poetry = ["poetry", "run"]

    print("🔍 Checking the commit message...")
    commit_message = get_commit_message()
    if not is_valid_commit_message(commit_message):
        print(f"❌ Invalid commit message: '{commit_message}'")
        print("💡 Use format: 'feat: message', 'fix: message', or 'chore: message'")
        sys.exit(1)

    print("✅ Commit message format is valid.")
    print("\n")

    try:
        subprocess.run(
            run_poetry + ["ruff", "--version"], check=True, stdout=subprocess.DEVNULL
        )
        print("✅ Ruff is installed.")
    except FileNotFoundError:
        print(
            "❌ Ruff is not installed in Poetry. Please install it: poetry add --dev ruff"
        )
        sys.exit(1)
    print("\n")

    is_fine = start_processes(
        [
            {"name": "Lint", "command": run_poetry + ["ruff", "check", "."]},
        ]
    )

    if not is_fine:
        sys.exit(1)


if __name__ == "__main__":
    main()
